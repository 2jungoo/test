#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

#define MAX_LINE 1024
#define MAX_LINES 10000

typedef struct {
    char content[MAX_LINE];
    long offset;
} LineInfo;

LineInfo lines[MAX_LINES];
int total_lines = 0;

void load_file(const char *filename);
void print_line(int line_num);
void print_range(int start, int end);
void print_list(char *input);
void print_all();

int main(int argc, char *argv[]) {
    char input[100];
    
    if (argc != 2) {
        printf("사용법: %s <파일명>\n", argv[0]);
        return 1;
    }
    
    // 파일 로드
    load_file(argv[1]);
    
    printf("파일 '%s'를 로드했습니다. (총 %d줄)\n", argv[1], total_lines);
    printf("\n사용 가능한 명령:\n");
    printf("  n        : n번째 줄 출력\n");
    printf("  n,...,m  : 여러 줄 출력 (예: 1,3,5)\n");
    printf("  n-m      : n부터 m까지 줄 출력\n");
    printf("  *        : 모든 줄 출력\n");
    printf("  q        : 종료\n\n");
    
    while (1) {
        printf("줄 번호> ");
        if (fgets(input, sizeof(input), stdin) == NULL) {
            break;
        }
        
        // 개행 문자 제거
        input[strcspn(input, "\n")] = 0;
        
        // 종료 명령
        if (strcmp(input, "q") == 0 || strcmp(input, "Q") == 0) {
            printf("프로그램을 종료합니다.\n");
            break;
        }
        
        // 모든 줄 출력
        if (strcmp(input, "*") == 0) {
            print_all();
        }
        // 범위 지정 (n-m)
        else if (strchr(input, '-') != NULL) {
            int start, end;
            if (sscanf(input, "%d-%d", &start, &end) == 2) {
                print_range(start, end);
            } else {
                printf("잘못된 형식입니다.\n");
            }
        }
        // 리스트 형식 (n,...,m)
        else if (strchr(input, ',') != NULL) {
            print_list(input);
        }
        // 단일 줄 번호
        else if (isdigit(input[0])) {
            int line_num = atoi(input);
            print_line(line_num);
        }
        else {
            printf("잘못된 입력입니다.\n");
        }
    }
    
    return 0;
}

void load_file(const char *filename) {
    FILE *fp = fopen(filename, "r");
    if (fp == NULL) {
        perror("파일 열기 실패");
        exit(1);
    }
    
    total_lines = 0;
    while (fgets(lines[total_lines].content, MAX_LINE, fp) != NULL && 
           total_lines < MAX_LINES) {
        total_lines++;
    }
    
    fclose(fp);
}

void print_line(int line_num) {
    if (line_num < 1 || line_num > total_lines) {
        printf("줄 번호가 범위를 벗어났습니다. (1-%d)\n", total_lines);
        return;
    }
    
    printf("%d: %s", line_num, lines[line_num - 1].content);
    if (lines[line_num - 1].content[strlen(lines[line_num - 1].content) - 1] != '\n') {
        printf("\n");
    }
}

void print_range(int start, int end) {
    if (start < 1) start = 1;
    if (end > total_lines) end = total_lines;
    
    if (start > end) {
        printf("시작 줄이 끝 줄보다 큽니다.\n");
        return;
    }
    
    for (int i = start; i <= end; i++) {
        print_line(i);
    }
}

void print_list(char *input) {
    char *token = strtok(input, ",");
    
    while (token != NULL) {
        int line_num = atoi(token);
        print_line(line_num);
        token = strtok(NULL, ",");
    }
}

void print_all() {
    for (int i = 1; i <= total_lines; i++) {
        print_line(i);
    }
}
