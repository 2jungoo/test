#include <stdio.h>
#include <stdlib.h>
#include <fcntl.h>
#include <unistd.h>
#include <sys/file.h>
#include <string.h>

int main(int argc, char *argv[]) {
    int fd;
    char editor[256] = "vi";  // 기본 편집기
    char command[512];
    
    // 명령줄 인수 확인
    if (argc < 2) {
        fprintf(stderr, "사용법: %s <파일명> [편집기]\n", argv[0]);
        fprintf(stderr, "예: %s file.txt vim\n", argv[0]);
        return 1;
    }
    
    // 편집기 지정 (선택사항)
    if (argc >= 3) {
        strncpy(editor, argv[2], sizeof(editor) - 1);
    }
    
    printf("파일 '%s'를 %s로 편집합니다.\n", argv[1], editor);
    
    // 파일 열기 (읽기/쓰기 모드)
    fd = open(argv[1], O_RDWR | O_CREAT, 0644);
    if (fd == -1) {
        perror("파일 열기 실패");
        return 1;
    }
    
    // 파일 전체에 배타적 잠금 설정
    printf("파일 잠금 시도 중...\n");
    
    if (flock(fd, LOCK_EX) == -1) {
        perror("파일 잠금 실패");
        close(fd);
        return 1;
    }
    
    printf("파일 잠금 성공!\n");
    printf("다른 프로세스는 이 파일을 수정할 수 없습니다.\n");
    printf("편집을 시작합니다...\n\n");
    
    // 편집기 실행 명령 생성
    snprintf(command, sizeof(command), "%s %s", editor, argv[1]);
    
    // system() 함수로 편집기 실행
    int result = system(command);
    
    if (result == -1) {
        perror("편집기 실행 실패");
    } else if (result == 0) {
        printf("\n편집 완료!\n");
    } else {
        printf("\n편집기가 종료되었습니다. (종료 코드: %d)\n", result);
    }
    
    // 파일 잠금 해제
    printf("파일 잠금 해제 중...\n");
    if (flock(fd, LOCK_UN) == -1) {
        perror("잠금 해제 실패");
    } else {
        printf("파일 잠금 해제 완료!\n");
    }
    
    // 파일 닫기
    close(fd);
    
    return 0;
}
