#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX_NAME 50

// 학생 구조체 정의
typedef struct {
    char name[MAX_NAME];
    int student_id;
    float score;
} Student;

// 학생 정보 출력 함수
void print_student(Student *s) {
    printf("이름: %s, 학번: %d, 점수: %.2f\n", 
           s->name, s->student_id, s->score);
}

// 학생 레코드 수정 함수
void modify_student(const char *filename, int student_id) {
    FILE *fp;
    Student s;
    int found = 0;
    long position;
    
    // 파일을 읽기/쓰기 모드로 열기
    fp = fopen(filename, "r+b");
    if (fp == NULL) {
        printf("파일을 열 수 없습니다.\n");
        return;
    }
    
    // 파일에서 학생 레코드 검색
    while (fread(&s, sizeof(Student), 1, fp) == 1) {
        if (s.student_id == student_id) {
            found = 1;
            
            // 현재 레코드 정보 출력
            printf("\n현재 레코드:\n");
            print_student(&s);
            
            // 새로운 정보 입력
            printf("\n새로운 정보 입력:\n");
            printf("이름: ");
            scanf("%s", s.name);
            printf("점수: ");
            scanf("%f", &s.score);
            
            // 레코드 시작 위치로 이동
            // ftell()은 다음 레코드를 가리키므로 sizeof(Student)만큼 뒤로
            position = ftell(fp) - sizeof(Student);
            fseek(fp, position, SEEK_SET);
            
            // 수정된 레코드 쓰기
            fwrite(&s, sizeof(Student), 1, fp);
            printf("\n레코드가 수정되었습니다.\n");
            break;
        }
    }
    
    if (!found) {
        printf("\n학번 %d인 학생을 찾을 수 없습니다.\n", student_id);
    }
    
    fclose(fp);
}

// 학생 레코드 추가 함수
void add_student(const char *filename) {
    FILE *fp;
    Student s;
    
    // 파일을 추가 모드로 열기
    fp = fopen(filename, "ab");
    if (fp == NULL) {
        printf("파일을 열 수 없습니다.\n");
        return;
    }
    
    // 새 학생 정보 입력
    printf("\n=== 새 학생 정보 입력 ===\n");
    printf("이름: ");
    scanf("%s", s.name);
    printf("학번: ");
    scanf("%d", &s.student_id);
    printf("점수: ");
    scanf("%f", &s.score);
    
    // 레코드를 파일 끝에 추가
    fwrite(&s, sizeof(Student), 1, fp);
    printf("\n학생 레코드가 추가되었습니다.\n");
    
    fclose(fp);
}

// 전체 학생 목록 출력 함수
void list_students(const char *filename) {
    FILE *fp;
    Student s;
    int count = 0;
    
    // 파일을 읽기 모드로 열기
    fp = fopen(filename, "rb");
    if (fp == NULL) {
        printf("파일을 열 수 없습니다.\n");
        return;
    }
    
    printf("\n========== 전체 학생 목록 ==========\n");
    
    // 모든 레코드 읽어서 출력
    while (fread(&s, sizeof(Student), 1, fp) == 1) {
        printf("%d. ", ++count);
        print_student(&s);
    }
    
    if (count == 0) {
        printf("등록된 학생이 없습니다.\n");
    } else {
        printf("===================================\n");
        printf("총 %d명의 학생\n", count);
    }
    
    fclose(fp);
}

int main() {
    char filename[] = "students.dat";
    int choice, student_id;
    
    while (1) {
        // 메뉴 출력
        printf("\n========== 학생 레코드 관리 프로그램 ==========\n");
        printf("1. 학생 추가\n");
        printf("2. 학생 수정\n");
        printf("3. 전체 목록 보기\n");
        printf("4. 종료\n");
        printf("=============================================\n");
        printf("선택: ");
        scanf("%d", &choice);
        
        switch (choice) {
            case 1:
                // 학생 추가
                add_student(filename);
                break;
                
            case 2:
                // 학생 수정
                printf("\n수정할 학생의 학번 입력: ");
                scanf("%d", &student_id);
                modify_student(filename, student_id);
                break;
                
            case 3:
                // 전체 목록 보기
                list_students(filename);
                break;
                
            case 4:
                // 종료
                printf("\n프로그램을 종료합니다.\n");
                return 0;
                
            default:
                printf("\n잘못된 선택입니다. 다시 선택하세요.\n");
        }
    }
    
    return 0;
}
